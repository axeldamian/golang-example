package main

import(
	"fmt"
	"math/rand"
	"os"
	"net/http"
	"log"
	"encoding/json"

	"github.com/go-echarts/go-echarts/v2/charts"
	"github.com/go-echarts/go-echarts/v2/opts"
	"github.com/go-echarts/go-echarts/v2/components"
)

var (
	itemCntPie = 4
	seasons    = []string{"Spring", "Summer", "Autumn ", "Winter"}
)

type Json struct {
    Response string `json:"response"`
}

func faviconHandler(w http.ResponseWriter, r *http.Request) {
	http.ServeFile(w, r, "relative/path/to/favicon.ico")
}

func handler(w http.ResponseWriter, r *http.Request) {
		log.Println(r.Host)
		log.Println(r.URL.Path)
	 	log.Println("endpoint /")
    fmt.Fprintf(w, "Hello, World!")
}

func translado(i, j int) (int , int) {
	return i + 1 , j + 1
}

// generate random data for bar chart
func generateBarItems() []opts.BarData {
	items := make([]opts.BarData, 0)
	for i := 0; i < 7; i++ {
		items = append(items, opts.BarData{Value: rand.Intn(300)})
	}
	return items
}

func generatePieItems() []opts.PieData {
	items := make([]opts.PieData, 0)
	for i := 0; i < itemCntPie; i++ {
		items = append(items, opts.PieData{Name: seasons[i], Value: rand.Intn(100)})
	}
	return items
}

func pieBase() *charts.Pie {
	pie := charts.NewPie()
	pie.SetGlobalOptions(
		charts.WithTitleOpts(opts.Title{Title: "basic pie example"}),
	)

	pie.AddSeries("pie", generatePieItems())
	return pie
}

func main() {
  x , y := translado( 1 , 2 )
	s := fmt.Sprintf("translado is %v , %v", x , y )
	fmt.Println(s) // uso una funcion con 2 valores.

	page := components.NewPage()
	page.AddCharts(
		pieBase(),
	)
	f, err := os.Create("pie.html")
	if err != nil {
		panic(err)
	}
	//page.Render(io.MultiWriter(f))
	page.Render(f)
	// create a new bar instance
		bar := charts.NewBar()
		// set some global options like Title/Legend/ToolTip or anything else
		bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{
			Title:    "My first bar chart generated by go-echarts",
			Subtitle: "It's extremely easy to use, right?",
		}))

		// Put data into instance
		bar.SetXAxis([]string{"Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"}).
			AddSeries("Category A", generateBarItems()).
			AddSeries("Category B", generateBarItems())
		// Where the magic happens
		//f, _ := os.Create("bar.html")
		//bar.Render(f)
		http.HandleFunc("/ping", func(w http.ResponseWriter, r *http.Request) {
			log.Println("endpoint /ping")
			var value string = "pong"
			d := Json{value}
			//json.NewEncoder(w).Encode(d)
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(http.StatusOK)
			json.NewEncoder(w).Encode(d)
		})

		http.HandleFunc("/bar/", func(w http.ResponseWriter, r *http.Request) {
			log.Println("endpoint /bar")
			http.ServeFile(w, r, "bar.html")
		})

		http.HandleFunc("/pie/", func(w http.ResponseWriter, r *http.Request) {
			log.Println("endpoint /pie")
			http.ServeFile(w, r, "pie.html")
		})
		http.HandleFunc("/favicon.ico", faviconHandler)

		http.HandleFunc("/", handler )

		log.Println("listening in port 8080...")
    http.ListenAndServe(":8080", nil)
}
